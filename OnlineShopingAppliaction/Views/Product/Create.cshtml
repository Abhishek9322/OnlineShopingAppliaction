@model OnlineShopingAppliaction.Models.Product
@{
    ViewData["Title"] = "Create Product";
}

<style>
    .btn-sm {
        border-radius: 8px;
        font-size: 0.85rem;
    }
</style>

<div class="container mt-4">
    <h2 class="fw-bold mb-3 text-dark">Add New Product</h2>

    <form asp-action="Create" enctype="multipart/form-data" method="post" class="card p-4 shadow-lg border-0 needs-validation" novalidate>
        <div class="mb-3">
            <label asp-for="Name" class="form-label">Product Name</label>
            <input asp-for="Name" class="form-control" required pattern="^(?=.*[A-Za-z])[A-Za-z0-9\s\-]{3,50}$" title="Product name must contain at least one letter, 3-50 chars." />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label">Description</label>
            <textarea asp-for="Description" id="descriptionBox" class="form-control" rows="3" required minlength="10" maxlength="500"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
            <a href="javascript:void(0)" id="toggleDesc" class="text-primary" style="display:none;">See More</a>
        </div>

        <div class="mb-3">
            <label asp-for="Price" class="form-label">Price (₹)</label>
            <input asp-for="Price" class="form-control" type="number" min="1" step="0.01" required />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Discount" class="form-label">Discount (%)</label>
            <input asp-for="Discount" id="discountField" class="form-control" type="number" min="0" max="90" step="1" required />
            <span asp-validation-for="Discount" class="text-danger"></span>
        </div>

        <!-- NEW: Stock -->
        <div class="mb-3">
            <label asp-for="Stock" class="form-label">Stock (Quantity)</label>
            <input asp-for="Stock" class="form-control" type="number" min="0" step="1" value="0" required />
            <span asp-validation-for="Stock" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Category</label>
            <select asp-for="CategoryId" class="form-control" asp-items="@(new SelectList(ViewBag.Categories, "Id", "Name"))">
                <option value="">-- Select Category --</option>
            </select>
            <span asp-validation-for="CategoryId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Product Image</label>
            <input type="file" name="ImageFile" class="form-control" accept="image/*" required />
            <div class="invalid-feedback">Please upload a valid image.</div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <button type="submit" class="btn btn-success btn-sm px-3">Save</button>
            <a asp-action="Index" class="btn btn-secondary btn-sm px-3">Back</a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const descBox = document.getElementById("descriptionBox");
        const toggleBtn = document.getElementById("toggleDesc");

        descBox.addEventListener("input", function () {
            toggleBtn.style.display = this.value.length > 150 ? "inline" : "none";
        });

        toggleBtn.addEventListener("click", function () {
            if (descBox.style.height === "80px" || descBox.style.height === "") {
                descBox.style.height = "200px";
                this.innerText = "See Less";
            } else {
                descBox.style.height = "80px";
                this.innerText = "See More";
            }
        });

        descBox.style.height = "80px";

        (() => {
            'use strict';
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();

        const priceInput = document.querySelector('input[name="Price"]');
        const discountInput = document.getElementById('discountField');

        priceInput.addEventListener('input', function () {
            const price = parseFloat(this.value);
            if (!isNaN(price)) {
                if (price > 5000) {
                    discountInput.value = 10;
                    discountInput.disabled = false;
                } else {
                    discountInput.value = 0;
                    discountInput.disabled = true;
                }
            }
        });
    </script>
}
